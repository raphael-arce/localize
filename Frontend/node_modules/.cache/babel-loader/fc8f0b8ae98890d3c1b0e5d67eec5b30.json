{"ast":null,"code":"import _classCallCheck from \"/Users/cristofers/localize/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cristofers/localize/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cristofers/localize/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cristofers/localize/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cristofers/localize/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/cristofers/localize/Frontend/src/containers/Search.js\";\nimport React, { Component } from 'react';\nimport Suggestions from '../components/Suggestions'; //const { API_KEY } = process.env\n\nvar API_URL = 'http://localhost:3000/products';\n\nvar Search =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Search, _Component);\n\n  function Search() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Search);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Search)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      query: \"\",\n      results: []\n    };\n\n    _this.getInfo = function () {\n      fetch(\"\".concat(API_URL, \"?keywords=[\\\"\").concat(_this.state.query, \"\\\"]\")).then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        _this.setState({\n          products: result\n        });\n      }, // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      function (error) {\n        _this.setState({\n          error: error\n        });\n      });\n      /*axios.get(`${API_URL}?keywords=[\"${this.state.query}\"]`)\n        .then(({ data }) => {\n          this.setState({\n            results: data.data // returns an object named data, \n                               // as does axios. So... data.data                             \n          })\n        })*/\n    };\n\n    _this.handleInputChange = function () {\n      _this.setState({\n        query: _this.search.value\n      }, function () {\n        if (_this.state.query && _this.state.query.length > 1) {\n          if (_this.state.query.length % 2 === 0) {\n            _this.getInfo();\n          }\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Search, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      //const {products} = this.state;\n      return React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        placeholder: \"Search for...\",\n        ref: function ref(input) {\n          return _this2.search = input;\n        },\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(Suggestions, {\n        results: this.state.results,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Search;\n}(Component);\n/*\nconstructor(props) {\n  super(props);\n  this.state = {\n    error: null,\n    isLoaded: false,\n    products: []\n  };\n}\n\ncomponentDidMount() {\n  fetch(API_URL)\n    .then(res => res.json())\n    .then(\n      (result) => {\n        this.setState({\n          isLoaded: true,\n          products: result\n        });\n      },\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      }\n    )\n}\n\nrender() {\n  const { error, isLoaded, products } = this.state;\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <ul>\n        {products.map(product => (\n          <li key={product.productId}>\n            {product.productName} {product.price}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n}*/\n\n\nexport default Search;","map":{"version":3,"sources":["/Users/cristofers/localize/Frontend/src/containers/Search.js"],"names":["React","Component","Suggestions","API_URL","Search","state","query","results","getInfo","fetch","then","res","json","result","setState","products","error","handleInputChange","search","value","length","input"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAGA,OAAOC,WAAP,MAAwB,2BAAxB,C,CAEA;;AACA,IAAMC,OAAO,GAAG,gCAAhB;;IAEMC,M;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,OAAO,EAAE;AAFH,K;;UAKRC,O,GAAU,YAAM;AACdC,MAAAA,KAAK,WAAIN,OAAJ,0BAA0B,MAAKE,KAAL,CAAWC,KAArC,SAAL,CACCI,IADD,CACM,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,OADT,EAECF,IAFD,CAGE,UAACG,MAAD,EAAY;AACV,cAAKC,QAAL,CAAc;AACZC,UAAAA,QAAQ,EAAEF;AADE,SAAd;AAGD,OAPH,EAQE;AACA;AACA;AACA,gBAACG,KAAD,EAAW;AACT,cAAKF,QAAL,CAAc;AACZE,UAAAA,KAAK,EAALA;AADY,SAAd;AAGD,OAfH;AAiBA;;;;;;;AAOD,K;;UAEDC,iB,GAAoB,YAAM;AACxB,YAAKH,QAAL,CAAc;AACZR,QAAAA,KAAK,EAAE,MAAKY,MAAL,CAAYC;AADP,OAAd,EAEG,YAAM;AACP,YAAI,MAAKd,KAAL,CAAWC,KAAX,IAAoB,MAAKD,KAAL,CAAWC,KAAX,CAAiBc,MAAjB,GAA0B,CAAlD,EAAqD;AACnD,cAAI,MAAKf,KAAL,CAAWC,KAAX,CAAiBc,MAAjB,GAA0B,CAA1B,KAAgC,CAApC,EAAuC;AACrC,kBAAKZ,OAAL;AACD;AACF;AACF,OARD;AASD,K;;;;;;;6BAEQ;AAAA;;AACP;AAEA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,WAAW,EAAC,eADd;AAEE,QAAA,GAAG,EAAE,aAAAa,KAAK;AAAA,iBAAI,MAAI,CAACH,MAAL,GAAcG,KAAlB;AAAA,SAFZ;AAGE,QAAA,QAAQ,EAAE,KAAKJ,iBAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAME,oBAAC,WAAD;AAAa,QAAA,OAAO,EAAE,KAAKZ,KAAL,CAAWE,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,CADF;AAWD;;;;EA3DkBN,S;AA8DrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA,eAAeG,MAAf","sourcesContent":["import React, { Component } from 'react'\n\n\nimport Suggestions from '../components/Suggestions'\n\n//const { API_KEY } = process.env\nconst API_URL = 'http://localhost:3000/products'\n\nclass Search extends Component {\n  state = {\n    query: \"\",\n    results: []\n  }\n\n  getInfo = () => {\n    fetch(`${API_URL}?keywords=[\"${this.state.query}\"]`)\n    .then(res => res.json())\n    .then(\n      (result) => {\n        this.setState({\n          products: result\n        });\n      },\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => {\n        this.setState({\n          error\n        });\n      }\n    )\n    /*axios.get(`${API_URL}?keywords=[\"${this.state.query}\"]`)\n      .then(({ data }) => {\n        this.setState({\n          results: data.data // returns an object named data, \n                             // as does axios. So... data.data                             \n        })\n      })*/\n  }\n\n  handleInputChange = () => {\n    this.setState({\n      query: this.search.value\n    }, () => {\n      if (this.state.query && this.state.query.length > 1) {\n        if (this.state.query.length % 2 === 0) {\n          this.getInfo()\n        }\n      } \n    })\n  }\n\n  render() {\n    //const {products} = this.state;\n  \n    return (\n      <form>\n        <input\n          placeholder=\"Search for...\"\n          ref={input => this.search = input}\n          onChange={this.handleInputChange}\n        />\n        <Suggestions results={this.state.results} />\n        \n      </form>\n    )\n  }\n\n}\n/*\nconstructor(props) {\n  super(props);\n  this.state = {\n    error: null,\n    isLoaded: false,\n    products: []\n  };\n}\n\ncomponentDidMount() {\n  fetch(API_URL)\n    .then(res => res.json())\n    .then(\n      (result) => {\n        this.setState({\n          isLoaded: true,\n          products: result\n        });\n      },\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      }\n    )\n}\n\nrender() {\n  const { error, isLoaded, products } = this.state;\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <ul>\n        {products.map(product => (\n          <li key={product.productId}>\n            {product.productName} {product.price}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n}*/\n\nexport default Search"]},"metadata":{},"sourceType":"module"}