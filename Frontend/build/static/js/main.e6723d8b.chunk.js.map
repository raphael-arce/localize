{"version":3,"sources":["components/Suggestions.js","containers/Search.js","containers/MapContainer.js","App.js","serviceWorker.js","index.js"],"names":["Suggestions","props","options","results","map","r","react_default","a","createElement","key","id","name","API_KEY","process","API_URL","Search","state","query","getInfo","axios","get","concat","_this","then","_ref","data","setState","handleInputChange","search","value","length","_this2","this","placeholder","ref","input","onChange","components_Suggestions","Component","mapStyles","width","height","MapContainer","_Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","dist","google","zoom","style","initialCenter","lat","lng","GoogleApiWrapper","apiKey","App","className","containers_Search","containers_MapContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sRAWeA,EATK,SAACC,GACnB,IAAMC,EAAUD,EAAME,QAAQC,IAAI,SAAAC,GAAC,OACjCC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,EAAEK,IACRL,EAAEM,QAGP,OAAOL,EAAAC,EAAAC,cAAA,UAAKN,ICHNU,EAAYC,8CAAZD,QACFE,EAAU,iCA4CDC,6MAzCbC,MAAQ,CACNC,MAAO,GACPd,QAAS,MAGXe,QAAU,WACRC,IAAMC,IAAN,GAAAC,OAAaP,EAAb,aAAAO,OAAgCT,EAAhC,eAAAS,OAAqDC,EAAKN,MAAMC,MAAhE,MACGM,KAAK,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACPH,EAAKI,SAAS,CACZvB,QAASsB,EAAKA,YAMtBE,kBAAoB,WAClBL,EAAKI,SAAS,CACZT,MAAOK,EAAKM,OAAOC,OAClB,WACGP,EAAKN,MAAMC,OAASK,EAAKN,MAAMC,MAAMa,OAAS,GAC5CR,EAAKN,MAAMC,MAAMa,OAAS,IAAM,GAClCR,EAAKJ,qFAMJ,IAAAa,EAAAC,KACP,OACE1B,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SACEyB,YAAY,gBACZC,IAAK,SAAAC,GAAK,OAAIJ,EAAKH,OAASO,GAC5BC,SAAUJ,KAAKL,oBAEjBrB,EAAAC,EAAAC,cAAC6B,EAAD,CAAalC,QAAS6B,KAAKhB,MAAMb,kBApCpBmC,qBCLfC,EAAY,CAChBC,MAAO,OACPC,OAAQ,OAGGC,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAZ,KAAAU,GAAAE,OAAAE,EAAA,EAAAF,CAAAZ,KAAAY,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,MAAAhB,KAAAiB,YAAA,OAAAL,OAAAM,EAAA,EAAAN,CAAAF,EAAAC,GAAAC,OAAAO,EAAA,EAAAP,CAAAF,EAAA,EAAAjC,IAAA,SAAAoB,MAAA,WAEI,OACEvB,EAAAC,EAAAC,cAAC4C,EAAA,IAAD,CACEC,OAAQrB,KAAK/B,MAAMoD,OACnBC,KAAM,GACNC,MAAOhB,EACPiB,cAAe,CACdC,KAAM,OACNC,IAAK,eATdhB,EAAA,CAAkCJ,aAgBnBqB,6BAAiB,CAC9BC,OAAQ,2CADKD,CAEZjB,GCIYmB,mLApBX,OACEvD,EAAAC,EAAAC,cAAA,OAAKsD,UAAU,kBACXxD,EAAAC,EAAAC,cAAA,OAAKsD,UAAU,iBACbxD,EAAAC,EAAAC,cAAA,OAAKsD,UAAU,OACbxD,EAAAC,EAAAC,cAAA,OAAKsD,UAAU,SAAf,cAIJxD,EAAAC,EAAAC,cAAA,OAAKsD,UAAU,UACbxD,EAAAC,EAAAC,cAACuD,EAAD,OAEFzD,EAAAC,EAAAC,cAAA,OAAKsD,UAAU,OACbxD,EAAAC,EAAAC,cAACwD,EAAD,eAdM1B,aCIE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtD,KAAK,SAAAuD,GACjCA,EAAaC","file":"static/js/main.e6723d8b.chunk.js","sourcesContent":["import React from 'react'\n\nconst Suggestions = (props) => {\n  const options = props.results.map(r => (\n    <li key={r.id}>\n      {r.name}\n    </li>\n  ))\n  return <ul>{options}</ul>\n}\n\nexport default Suggestions","import React, { Component } from 'react'\nimport axios from 'axios'\n\nimport Suggestions from '../components/Suggestions'\n\nconst { API_KEY } = process.env\nconst API_URL = 'http://localhost:3000/products'\n\nclass Search extends Component {\n  state = {\n    query: \"\",\n    results: []\n  }\n\n  getInfo = () => {\n    axios.get(`${API_URL}?api_key=${API_KEY}?keywords=[${this.state.query}]`)\n      .then(({ data }) => {\n        this.setState({\n          results: data.data // returns an object named data, \n                             // as does axios. So... data.data                             \n        })\n      })\n  }\n\n  handleInputChange = () => {\n    this.setState({\n      query: this.search.value\n    }, () => {\n      if (this.state.query && this.state.query.length > 1) {\n        if (this.state.query.length % 2 === 0) {\n          this.getInfo()\n        }\n      } \n    })\n  }\n\n  render() {\n    return (\n      <form>\n        <input\n          placeholder=\"Search for...\"\n          ref={input => this.search = input}\n          onChange={this.handleInputChange}\n        />\n        <Suggestions results={this.state.results} />\n      </form>\n    )\n  }\n}\n\nexport default Search","import React, { Component } from 'react';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\n\nconst mapStyles = {\n  width: '100%',\n  height: '50%'\n};\n\nexport class MapContainer extends Component {\n  render() {\n    return (\n      <Map\n        google={this.props.google}\n        zoom={14}\n        style={mapStyles}\n        initialCenter={{\n         lat: -1.2884,\n         lng: 36.8233\n        }}\n      />\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyCke5lTqeM0OrMmDAVkzdzMY02dbvD_q8M'\n})(MapContainer);","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n \nimport Search from './containers/Search';\nimport MapContainer from './containers/MapContainer';\n//import Map from './containers/Map';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"main-container\">\n          <div className=\"nav-container\">\n            <nav className=\"nav\">\n              <div className=\"title\">Localize</div>\n            </nav>\n          </div>\n      \n          <div className=\"search\">\n            <Search/>\n          </div>\n          <div className=\"map\">\n            <MapContainer/>\n          </div>\n          \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}